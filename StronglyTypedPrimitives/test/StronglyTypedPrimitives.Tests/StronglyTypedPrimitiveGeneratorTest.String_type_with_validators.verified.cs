//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable

namespace SomeNamespace;

[System.CodeDom.Compiler.GeneratedCodeAttribute("StronglyTypedPrimitives, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null", "1.0.0.0")]
public readonly partial record struct Foo :
    global::StronglyTypedPrimitives.IStronglyTypedPrimitive
{
    public static readonly Foo None = new Foo(default);
        private static readonly global::System.ComponentModel.DataAnnotations.ValidationAttribute[] Validators =
    [
        new global::System.ComponentModel.DataAnnotations.RegularExpressionAttribute("^[a-zA-Z''-'\\s]{1,40}$"),
        new global::System.ComponentModel.DataAnnotations.DeniedValuesAttribute(new [] {"foo", "bar"})
    ];

    [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
    public static bool IsValid(string value)
    {
        for (var i = 0; i < Validators.Length; i++)
        {
            if (!Validators[i].IsValid(value))
            {
                return false;
            }
        }

        return true;
    }

    public string Value { get; init; } = ThrowIfInvalid(Value);

    private static string ThrowIfInvalid(string value)
    {
        if (!IsValid(value))
        {
            throw new global::System.ArgumentException($"The value '{value}' is not valid for Foo.", "Value");
        }

        return value;
    }
}