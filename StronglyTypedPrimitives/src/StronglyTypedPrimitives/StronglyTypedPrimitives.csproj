<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <IncludeBuildOutput>false</IncludeBuildOutput>
    <Nullable>enable</Nullable>
    <RootNamespace>StronglyTypedPrimitives</RootNamespace>
    <IsAnalyzersProject>true</IsAnalyzersProject>
    <EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
    <IsRoslynComponent>true</IsRoslynComponent>
    <NoWarn>$(NoWarn);NU5128</NoWarn>
  </PropertyGroup>

  <PropertyGroup>
    <PackageId>StronglyTypedPrimitives</PackageId>
    <Title>Strongly Typed Primitives</Title>
    <Company>Egil Hansen</Company>
    <Authors>Egil Hansen</Authors>
    <Description>
      A source generator for creating strongly-typed primitive types that makes
      it easy to avoid the primitive obsession anti pattern.
      Add a [StronglyTyped] attribute to a partial record struct to get started.
    </Description>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageTags>stronglytyped, primitive-obsession, generator, egil</PackageTags>
    <Copyright>Egil Hansen</Copyright>
    <PackageProjectUrl>https://github.com/egil/framework/tree/main/StronglyTypedPrimitives</PackageProjectUrl>
    <RepositoryUrl>https://github.com/egil/framework</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <MinVerTagPrefix>v</MinVerTagPrefix>
    <EnablePackageValidation>false</EnablePackageValidation>
    <GenerateCompatibilitySuppressionFile>true</GenerateCompatibilitySuppressionFile>
    <PackageValidationBaselineVersion>1.0.0</PackageValidationBaselineVersion>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="DotNet.ReproducibleBuilds">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Meziantou.Polyfill">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.CodeAnalysis.Analyzers">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.CodeAnalysis.Common" PrivateAssets="All" />
    <PackageReference Include="Microsoft.CodeAnalysis.CSharp" PrivateAssets="All" />
    <PackageReference Include="MinVer">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <None Include="$(OutputPath)\$(AssemblyName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\..\LICENSE">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
    <None Include="..\..\README.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

  <Target Name="SetPackageReleaseNotes" BeforeTargets="GenerateNuspec">
    <PropertyGroup>
      <PackageReleaseNotes>$([System.IO.File]::ReadAllText("$(MSBuildProjectDirectory)/../../CHANGELOG.md"))</PackageReleaseNotes>
    </PropertyGroup>
  </Target>

</Project>
