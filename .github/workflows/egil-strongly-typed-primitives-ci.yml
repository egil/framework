# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: egil-strongly-typed-primitives-ci
on:
  workflow_dispatch:
    inputs:
      prepare-release:
        description: 'Run prepare-release job'
        type: boolean
        default: false
      release-type:
        description: 'Type of release'
        type: choice
        options:
          - build
          - minor
          - major
        default: minor
  push:
    branches:
      - 'main'
      - 'release/egil-strongly-typed-primitives/v*'
  pull_request:
    branches:
      - 'main'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.run_id || github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget
  TestResultsDirectory: ${{ github.workspace}}/TestResults
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  create-nuget:
    runs-on: ubuntu-latest
    if: github.event.inputs.prepare-release != 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.x
            10.x

      - run: |
          dotnet build ./Egil.StronglyTypedPrimitives/src/Egil.StronglyTypedPrimitives.Abstractions/Egil.StronglyTypedPrimitives.Abstractions.csproj -c Release -f net9.0
          dotnet build ./Egil.StronglyTypedPrimitives/src/Egil.StronglyTypedPrimitives.Abstractions/Egil.StronglyTypedPrimitives.Abstractions.csproj -c Release -f net8.0
          dotnet build ./Egil.StronglyTypedPrimitives/src/Egil.StronglyTypedPrimitives.Abstractions/Egil.StronglyTypedPrimitives.Abstractions.csproj -c Release -f netstandard2.0
          dotnet pack ./Egil.StronglyTypedPrimitives/src/Egil.StronglyTypedPrimitives -c Release --no-build --output ${{ env.NuGetDirectory }}

      - uses: actions/upload-artifact@v4
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 7
          path: ${{ env.NuGetDirectory }}/*.nupkg

  validate-nuget:
    runs-on: ubuntu-latest
    if: github.event.inputs.prepare-release != 'true'
    needs: [ create-nuget ]
    steps:

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.x
            10.x

      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Install nuget validator
        run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

      - name: Validate package
        shell: pwsh
        run: meziantou.validate-nuget-package (Get-ChildItem "${{ env.NuGetDirectory }}/*.nupkg") --excluded-rules IconMustBeSet

  run-test:
    runs-on: ubuntu-latest
    if: github.event.inputs.prepare-release != 'true'
    timeout-minutes: 30
    env:
      TestResultsDirectory: ${{ github.workspace }}/TestResults
    permissions:
      checks: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.x
            10.x

      - name: Run tests
        run: dotnet test ./Egil.StronglyTypedPrimitives/Egil.StronglyTypedPrimitives.sln --configuration Release --logger trx --results-directory "${{ env.TestResultsDirectory }}" --collect:"XPlat Code Coverage"

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          if-no-files-found: error
          retention-days: 3
          path: ${{ env.TestResultsDirectory }}/**

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: github.actor != 'dependabot[bot]' && (success() || failure()) && github.repository_owner == 'egil'
        with:
          name: test-results
          path: ${{ env.TestResultsDirectory }}/**/*.trx
          path-replace-backslashes: 'true'
          reporter: dotnet-trx

  dependency-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: github.event_name == 'pull_request' && github.repository_owner == 'egil'
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v4
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v4

  prepare-release:
    runs-on: ubuntu-latest
    needs: [validate-nuget, run-test]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.prepare-release == 'true'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.x

      - name: Configure GIT
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Prepare release
        id: prepare-release
        run: |
          cd Egil.StronglyTypedPrimitives
          dotnet tool restore
          RELEASE_INFO=$(dotnet nbgv prepare-release --versionIncrement ${{ github.event.inputs.release-type }} --commit-message-pattern "Egil.StronglyTypedPrimitives - {0} release" --format json)
          echo "RELEASE_INFO<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_INFO" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_INFO" | jq .

      - name: Extract branch info
        id: extract-branch
        shell: bash
        run: |
          RELEASE_INFO='${{ steps.prepare-release.outputs.RELEASE_INFO }}'
          NEW_BRANCH=$(echo "$RELEASE_INFO" | jq -r '.NewBranch.Name')
          echo "NEW_BRANCH=$NEW_BRANCH" >> $GITHUB_OUTPUT
          echo "New branch created: $NEW_BRANCH"

      - name: Push release branch
        env:
          PAT_TOKEN: ${{ secrets.PAT_FOR_GIT_CONTENT_OPS }}
        run: |
          if [[ "${{ steps.extract-branch.outputs.NEW_BRANCH }}" != "null" ]]; then
            git push https://${PAT_TOKEN}@github.com/${{ github.repository }}.git ${{ steps.extract-branch.outputs.NEW_BRANCH }}
            echo "Pushed new branch: ${{ steps.extract-branch.outputs.NEW_BRANCH }}"
          else
            echo "No new branch was created"
          fi

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Push changes to main
        run: git push origin main

  release:
    runs-on: ubuntu-latest
    needs: [validate-nuget, run-test]
    if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/heads/release/egil-strongly-typed-primitives/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v4

      - name: Publish NuGet package
        shell: pwsh
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }